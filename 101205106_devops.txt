COMP3104 - DevOps

Course Description
In this course students will learn the procedures, protocols and best practices that a DevOps
engineer brings to a workplace environment to increase productivity. Analyze and evaluate
various developer operation implementations available and implement hands-on work using
industry standard toolkit. Create solutions to complex business problems by adhering to the core
responsibilities of DevOps.

Course Outcomes

At the end of this course, the student will reliably demonstrate the ability to:
1. Demonstrate knowledge of effective DevOps techniques and be able to provide solutions
using industry standard tools and techniques such as continuous
integration/delivery/deployment strategies, software development lifecycle, application
containerization for deployment, etc.
2. Perform hand-on lab work by applying DevOps techniques.
3. Ensure effective cross collaboration amongst IT staff by following the role and
responsibilities of an engineer.
4. Analyze and utilize Version Control System workflows for low-risk software releases.
5. Take well informed architectural decisions for software products, specifically in the
context of monolith vs microservice architectures.
6. Monitor code quality and deploy applications to hosting services.
7. Utilize service platforms such as Infrastructure as Code and the associated benefits of
cloud computing products.
8. Identify the market space as a DevOps engineer

DevOps is a combination of “Development” and “Operations” — it’s both a culture and a set of practices that aim to improve collaboration between software developers (Dev) and IT operations teams (Ops).

In simple terms, DevOps is about building, testing, and releasing software faster and more reliably through automation and teamwork.

🔧 Key Idea

Traditionally, developers wrote code, and operations teams deployed and maintained it.
This separation often caused delays, miscommunication, and bugs.
DevOps bridges that gap — so both teams work together throughout the entire software lifecycle (from coding → testing → deployment → monitoring).

🚀 Core Principles

Collaboration and Communication – Developers and IT professionals share responsibility for software quality and performance.

Automation – Tasks like testing, deployment, and infrastructure setup are automated to reduce human error.

Continuous Integration (CI) – Developers frequently merge code changes into a shared repository where automated tests run.

Continuous Delivery (CD) – Software updates are automatically prepared for release, ensuring fast and reliable deployments.

Monitoring and Feedback – Systems are continuously monitored to detect issues early and improve future releases.

🧰 Common DevOps Tools

Version Control: Git, GitHub, GitLab

CI/CD Pipelines: Jenkins, GitHub Actions, CircleCI

Configuration Management: Ansible, Puppet, Chef

Containerization: Docker, Kubernetes

Monitoring: Prometheus, Grafana, ELK Stack (Elasticsearch, Logstash, Kibana)

💡 Benefits of DevOps

Faster software delivery

Fewer bugs and outages

Greater team collaboration

More efficient use of resources

Quicker recovery from failures